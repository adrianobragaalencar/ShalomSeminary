/*
 * Copyright (c) 2013, Yatta Tech and/or its affiliates. All rights reserved.
 * YATTATECH PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package com.yattatech.form;

import com.yattatech.Constants;
import com.yattatech.domain.City;
import com.yattatech.domain.Codeable;
import com.yattatech.domain.Couple;
import com.yattatech.domain.FedUnit;
import com.yattatech.domain.Husband;
import com.yattatech.domain.Month;
import com.yattatech.domain.Neighbor;
import com.yattatech.domain.Seminary;
import com.yattatech.domain.Wife;
import com.yattatech.domain.ZipcodeSearch;
import com.yattatech.facade.SystemFacade;
import com.yattatech.predicate.NonEmptyStringPredicate;
import com.yattatech.predicate.PhoneMaskStringPredicate;
import com.yattatech.util.StringUtil;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.MaskFormatter;
import static com.yattatech.Constants.EMPTY_STR;
import javax.swing.JFormattedTextField;

/**
 * Form where the user can add new couples 
 * to a seminary 
 * 
 * @author Adriano Braga Alencar (adrianobragaalencar@gmail.com)
 * 
 */
public class CoupleCRUDForm extends javax.swing.JPanel {
        
    private static final Logger LOGGER                            = Logger.getLogger("CoupleCRUDForm");
    private static final SystemFacade FACADE                      = SystemFacade.getInstance();
    private static final NonEmptyStringPredicate PREDICATE        = new NonEmptyStringPredicate();
    private static final PhoneMaskStringPredicate PHONE_PREDICATE = new PhoneMaskStringPredicate();
    private static FileNameExtensionFilter fileFilter;
    private final ActionListener cityActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            final City city = (City)cmbCoupleCity.getSelectedItem();
            loadNeighborData(city);
        }
    };
    private Couple currentCouple;
    private int index;
    
    /**
     * Creates new form CoupleCRUDForm
     */
    public CoupleCRUDForm() {    
        initComponents();
        setComponentsProperties();
        setDynamicListListeners();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        try {
            husbPhoneMask = new MaskFormatter("(##)####-####");
            husbPhoneMask.setPlaceholderCharacter(' ');
            txtHusbPhone = new javax.swing.JFormattedTextField(husbPhoneMask);
            try {
                husbCellMask = new MaskFormatter("(##)####-####");
                husbCellMask.setPlaceholderCharacter(' ');
                txtHusbCellphone = new javax.swing.JFormattedTextField(husbCellMask);
                try {
                    wifePhoneMask = new MaskFormatter("(##)####-####");
                    wifePhoneMask.setPlaceholderCharacter(' ');
                    txtWifePhone = new javax.swing.JFormattedTextField(wifePhoneMask);
                    try {
                        wifeCellMask = new MaskFormatter("(##)####-####");
                        wifeCellMask.setPlaceholderCharacter(' ');
                        txtWifeCellphone = new javax.swing.JFormattedTextField(wifeCellMask);
                        try {
                            coupleZipcodeMask = new MaskFormatter("########");
                            coupleZipcodeMask.setPlaceholderCharacter(' ');
                            txtCoupleZipcode = new javax.swing.JFormattedTextField(coupleZipcodeMask);

                            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

                            btnClear.setText("Limpar");
                            btnClear.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    btnClearActionPerformed(evt);
                                }
                            });

                            tabPanelCouple.setPreferredSize(new java.awt.Dimension(380, 200));

                            panelHusband.setBorder(javax.swing.BorderFactory.createTitledBorder("Esposo"));
                            panelHusband.setPreferredSize(new java.awt.Dimension(380, 150));

                            labHusbName.setText("Nome:");

                            labHusbEmail.setText("Email:");

                            labHusbWork.setText("Profiss√£o:");

                            labHusbBirthday.setText("Nasc:");

                            labHusbPhone.setText("Telefone:");

                            labHusbCellPhone.setText("Celular:");

                        } catch (ParseException e) {
                        }

                    } catch (ParseException e) {
                    }

                    cmbHusbDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

                    cmbHusbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

                    cmbHusbWork.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

                    javax.swing.GroupLayout panelHusbandLayout = new javax.swing.GroupLayout(panelHusband);
                    panelHusband.setLayout(panelHusbandLayout);
                    panelHusbandLayout.setHorizontalGroup(
                        panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelHusbandLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labHusbWork)
                                .addComponent(labHusbName)
                                .addComponent(labHusbEmail)
                                .addComponent(labHusbBirthday))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtHubsName, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelHusbandLayout.createSequentialGroup()
                                    .addComponent(cmbHusbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbHusbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39)
                                    .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labHusbPhone)
                                        .addComponent(labHusbCellPhone))
                                    .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelHusbandLayout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(txtHusbCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelHusbandLayout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(txtHusbPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(0, 126, Short.MAX_VALUE))
                                .addGroup(panelHusbandLayout.createSequentialGroup()
                                    .addComponent(txtHusbWork, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbHusbWork, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(txtHubsEmail))
                            .addContainerGap())
                    );
                    panelHusbandLayout.setVerticalGroup(
                        panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelHusbandLayout.createSequentialGroup()
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labHusbName)
                                .addComponent(txtHubsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labHusbEmail)
                                .addComponent(txtHubsEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labHusbWork)
                                .addComponent(txtHusbWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbHusbWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelHusbandLayout.createSequentialGroup()
                                    .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labHusbBirthday)
                                        .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labHusbPhone)
                                            .addComponent(txtHusbPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(14, 14, 14)
                                    .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtHusbCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labHusbCellPhone))
                                    .addContainerGap(160, Short.MAX_VALUE))
                                .addGroup(panelHusbandLayout.createSequentialGroup()
                                    .addGroup(panelHusbandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cmbHusbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbHusbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                    );

                    tabPanelCouple.addTab("Esposo", panelHusband);

                    panelWife.setBorder(javax.swing.BorderFactory.createTitledBorder("Esposa"));
                    panelWife.setPreferredSize(new java.awt.Dimension(380, 150));

                    labWifeName.setText("Nome:");

                    labWifeEmail.setText("Email:");

                    labWifeWork.setText("Profiss√£o:");

                    labWifeBirthday.setText("Nasc:");

                    labWifePhone.setText("Telefone:");

                    labWifeCellPhone.setText("Celular:");

                } catch (ParseException e) {
                }

            } catch (ParseException e) {
            }

            cmbWifeDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            cmbWifeMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            cmbWifeWork.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            javax.swing.GroupLayout panelWifeLayout = new javax.swing.GroupLayout(panelWife);
            panelWife.setLayout(panelWifeLayout);
            panelWifeLayout.setHorizontalGroup(
                panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWifeLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labWifeWork)
                        .addComponent(labWifeName)
                        .addComponent(labWifeEmail)
                        .addComponent(labWifeBirthday))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtWifeName, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelWifeLayout.createSequentialGroup()
                            .addComponent(cmbWifeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbWifeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labWifePhone)
                                .addComponent(labWifeCellPhone))
                            .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelWifeLayout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(txtWifeCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelWifeLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(txtWifePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 126, Short.MAX_VALUE))
                        .addGroup(panelWifeLayout.createSequentialGroup()
                            .addComponent(txtWifeWork, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbWifeWork, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(txtWifeEmail))
                    .addContainerGap())
            );
            panelWifeLayout.setVerticalGroup(
                panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWifeLayout.createSequentialGroup()
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labWifeName)
                        .addComponent(txtWifeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labWifeEmail)
                        .addComponent(txtWifeEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labWifeWork)
                        .addComponent(txtWifeWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbWifeWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelWifeLayout.createSequentialGroup()
                            .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labWifeBirthday)
                                .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labWifePhone)
                                    .addComponent(txtWifePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(14, 14, 14)
                            .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtWifeCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labWifeCellPhone))
                            .addGap(95, 160, Short.MAX_VALUE))
                        .addGroup(panelWifeLayout.createSequentialGroup()
                            .addGroup(panelWifeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbWifeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbWifeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))))
            );

            tabPanelCouple.addTab("Esposa", panelWife);

            panelCouple.setBorder(javax.swing.BorderFactory.createTitledBorder("Casal"));
            panelCouple.setPreferredSize(new java.awt.Dimension(380, 150));

            labCoupleName.setText("Nome:");

            labCoupleAddress.setText("Endere√ßo:");

            labCoupleZipcode.setText("Cep:");

        } catch (ParseException e) {
        }

        labCoupleNeighbor.setText("Bairro:");

        labCoupleCity.setText("Cidade:");

        labCoupleState.setText("Estado:");

        labCoupleCompl.setText("Compl:");

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Foto"));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        btnPickPhoto.setText("Escolher Foto");
        btnPickPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPickPhotoActionPerformed(evt);
            }
        });

        btnSearchZipcode.setText("Buscar p/CEP");
        btnSearchZipcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchZipcodeActionPerformed(evt);
            }
        });

        cmbCoupleState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbCoupleCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbCoupleNeighbor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Data:");

        cmbCoupleDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbCoupleMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelCoupleLayout = new javax.swing.GroupLayout(panelCouple);
        panelCouple.setLayout(panelCoupleLayout);
        panelCoupleLayout.setHorizontalGroup(
            panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labCoupleAddress)
                    .addComponent(labCoupleZipcode)
                    .addComponent(labCoupleCompl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCoupleName)
                    .addComponent(labCoupleState)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCoupleLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(cmbCoupleState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labCoupleCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCoupleCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labCoupleNeighbor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCoupleNeighbor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 172, Short.MAX_VALUE))
                    .addGroup(panelCoupleLayout.createSequentialGroup()
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCoupleAddress, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCoupleName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCoupleCompl, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCoupleZipcode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelCoupleLayout.createSequentialGroup()
                                .addComponent(cmbCoupleDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCoupleMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(btnSearchZipcode)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCoupleLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPickPhoto))))
        );
        panelCoupleLayout.setVerticalGroup(
            panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupleLayout.createSequentialGroup()
                .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCoupleLayout.createSequentialGroup()
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labCoupleName)
                            .addComponent(txtCoupleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labCoupleAddress)
                            .addComponent(txtCoupleAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labCoupleCompl)
                            .addComponent(txtCoupleCompl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCoupleZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labCoupleZipcode))
                        .addGap(18, 18, 18)
                        .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchZipcode)
                            .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(cmbCoupleDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbCoupleMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labCoupleState)
                    .addGroup(panelCoupleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labCoupleCity)
                        .addComponent(cmbCoupleCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labCoupleNeighbor)
                        .addComponent(cmbCoupleNeighbor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbCoupleState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnPickPhoto)
                .addContainerGap())
        );

        tabPanelCouple.addTab("Casal", panelCouple);

        btnAdd.setText("Adicionar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnPrevData.setText("<<");
        btnPrevData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevDataActionPerformed(evt);
            }
        });

        btnNextData.setText(">>");
        btnNextData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextDataActionPerformed(evt);
            }
        });

        labCoupleSize.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labCoupleSize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrevData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNextData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd))
                    .addComponent(tabPanelCouple, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(tabPanelCouple, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnAdd)
                    .addComponent(btnPrevData)
                    .addComponent(btnNextData)
                    .addComponent(labCoupleSize))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
        final int option = JOptionPane.showConfirmDialog(this, 
                                                         "Deseja realmente limpar todos os campos?", 
                                                         "Alerta", 
                                                         JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.NO_OPTION) {
            return;
        }        
        clearAllData();
    }//GEN-LAST:event_btnClearActionPerformed

    private void clearAllData() {
        // clear husband form data
        clearTextField(txtHubsName);
        clearTextField(txtHubsEmail);
        clearTextField(txtHusbWork);
        clearTextField(txtHusbPhone);
        clearTextField(txtHusbCellphone);
        // to erase last valid value and avoid to take it
        // back whenever component loses its focus
        ((JFormattedTextField)txtHusbPhone).setValue(null);
        ((JFormattedTextField)txtHusbCellphone).setValue(null);
        unselectComboBox(cmbHusbDay);
        unselectComboBox(cmbHusbMonth);
        unselectComboBox(cmbHusbWork);        
        // clear wife form data
        clearTextField(txtWifeName);
        clearTextField(txtWifeEmail);
        clearTextField(txtWifeWork);
        clearTextField(txtWifePhone);
        clearTextField(txtWifeCellphone);        
        // to erase last valid value and avoid to take it
        // back whenever component loses its focus        
        ((JFormattedTextField)txtWifePhone).setValue(null);
        ((JFormattedTextField)txtWifeCellphone).setValue(null);        
        unselectComboBox(cmbWifeDay);
        unselectComboBox(cmbWifeMonth);
        unselectComboBox(cmbWifeWork);
        // clear couple form data
        clearTextField(txtCoupleName);
        clearTextField(txtCoupleAddress);
        clearTextField(txtCoupleCompl);
        clearTextField(txtCoupleZipcode);
        // to erase last valid value and avoid to take it
        // back whenever component loses its focus                
        ((JFormattedTextField)txtCoupleZipcode).setValue(null);        
        unselectComboBox(cmbCoupleDay);
        unselectComboBox(cmbCoupleMonth);
        unselectComboBox(cmbCoupleNeighbor);                            
        imagePanel.loadDefaultImage();        
        // sometimes we are in edit mode and clicks on clean
        // in that cause we gonna act as user is adding a new 
        // one, cleaning all data 
        index         = FACADE.getSeminary().coupleSize();
        currentCouple = null;
        btnAdd.setText("Adicionar");
    }
    
    private void btnPickPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPickPhotoActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (fileFilter == null) {
            fileFilter = new FileNameExtensionFilter("Arquivos de imagem", 
                                                      ImageIO.getReaderFileSuffixes());            
        }        
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(fileFilter);
        final int value      = chooser.showOpenDialog(this);
        if (value == JFileChooser.APPROVE_OPTION) {
            imagePanel.loadImage(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_btnPickPhotoActionPerformed

    private void btnSearchZipcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchZipcodeActionPerformed
        final String zipCode = txtCoupleZipcode.getText();
        if (StringUtil.isEmpty(zipCode)) {
            final String msg = String.format("O cep deve ser informado e o tamanho deve ser %d caracteres", 
                                             Constants.ZIP_CODE_SIZE);
            JOptionPane.showMessageDialog(this, msg, "Erro", JOptionPane.ERROR_MESSAGE);
        } else {            
            final ZipcodeSearch result = FACADE.searchByZipcode(zipCode);
            if (result == null) {
                final String msg = String.format("Nenhum resultado encontrado para %s.", zipCode);
                JOptionPane.showMessageDialog(this, msg, "Erro", JOptionPane.ERROR_MESSAGE);                
            } else {
                txtCoupleAddress.setText(result.getStreetName());
                txtCoupleZipcode.setText(result.getZipCode());
                selectById(cmbCoupleState,    result.getCodeFU());
                selectById(cmbCoupleCity,     result.getCodeCity());     
                selectById(cmbCoupleNeighbor, result.getCodeNeighbor());
            }
        }
    }//GEN-LAST:event_btnSearchZipcodeActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        final Husband husband = getHusbandData();
        if (husband != null) {
            final Wife wife = getWifeData();
            if (wife != null) {
                final Couple couple = getCoupleData();
                if (couple == null) {
                    return;
                }                
                couple.setHusband(husband);
                couple.setWife(wife);
                // currentCouple as null means that we are adding a new
                // one then we just gonna clean all data and put the cursor
                // to a next empty element, if we're in edit mode then we
                // just validate mandatory fields
                if (currentCouple == null) {
                    FACADE.getSeminary().addCouple(couple);
                    clearAllData();
                    final int size = FACADE.getSeminary().coupleSize();
                    setLabelCoupleSize(size);   
                    setCurrentIndex(size);                                
                } else {
                    JOptionPane.showMessageDialog(this, "Item editado com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);            
                    // simulate a click tomove to next value, it could be a next editable
                    // item or a new one, if we has reached the end of
                    // the couple list                    
                    btnNextDataActionPerformed(null);
                }       
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void unselectComboBox(JComboBox comboBox) {
        comboBox.setSelectedIndex(-1);
    }
    
    private void btnPrevDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevDataActionPerformed
        final Seminary seminary = FACADE.getSeminary();
        if ((index - 1) >= 0) {
            currentCouple = seminary.getCouple(--index);
            loadCoupleData();
            btnAdd.setText("Editar");            
        }
        setLabelCoupleSize(seminary.coupleSize());
        LOGGER.info(String.format("current index=%d", index));
    }//GEN-LAST:event_btnPrevDataActionPerformed

    private void btnNextDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextDataActionPerformed
        final Seminary seminary = FACADE.getSeminary();
        final int maxSize       = seminary.coupleSize();
        if ((index + 1) < maxSize) {
            currentCouple = seminary.getCouple(++index);
            loadCoupleData();
            btnAdd.setText("Editar");            
        } else {
            index         = maxSize;
            clearAllData();
            btnAdd.setText("Adicionar");
        }
        setLabelCoupleSize(maxSize);
        LOGGER.info(String.format("current index=%d", index));
    }//GEN-LAST:event_btnNextDataActionPerformed

    private void loadCoupleData() {
        final Couple couple = currentCouple;
        if (currentCouple == null) {
            return;
        }
        final Husband husband = couple.getHusband();
        txtHubsName.setText(husband.getName());
        txtHubsEmail.setText(husband.getEmail());
        txtHusbWork.setText(husband.getWork());
        txtHusbPhone.setText(husband.getTelephone());
        txtHusbCellphone.setText(husband.getCellphone());
        cmbHusbDay.setSelectedItem(husband.getDay());
        cmbHusbMonth.setSelectedItem(FACADE.getMonthByDesc(husband.getMonth()));
        
        final Wife wife = couple.getWife();
        txtWifeName.setText(wife.getName());
        txtWifeEmail.setText(wife.getEmail());
        txtWifeWork.setText(wife.getWork());
        txtWifePhone.setText(wife.getTelephone());
        txtWifeCellphone.setText(wife.getCellphone());
        cmbWifeDay.setSelectedItem(wife.getDay());
        cmbWifeMonth.setSelectedItem(FACADE.getMonthByDesc(wife.getMonth()));
        
        txtCoupleAddress.setText(couple.getAddress());
        txtCoupleCompl.setText(couple.getCompl());
        txtCoupleName.setText(couple.getName());
        txtCoupleZipcode.setText(couple.getZipcode());
        cmbCoupleDay.setSelectedItem(couple.getDay());
        cmbCoupleMonth.setSelectedItem(FACADE.getMonthByDesc(couple.getMonth()));
        cmbCoupleState.setSelectedItem(couple.getState());
        cmbCoupleCity.setSelectedItem(couple.getCity());
        cmbCoupleNeighbor.setSelectedItem(couple.getNeighbor());
        final String imagePath = couple.getPhotoPath();
        if (StringUtil.isEmpty(imagePath)) {
            imagePanel.loadDefaultImage();
        } else {
            imagePanel.loadImage(imagePath);
        }        
    }
    
    private Husband getHusbandData() {         
        final String name     = txtHubsName.getText();
        if (StringUtil.isEmpty(name)) {
            JOptionPane.showMessageDialog(this, "O nome do marido deve ser fornecido.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return null;
        } 
        final Husband husband = currentCouple == null ? new Husband() : currentCouple.getHusband();
        husband.setName(name);
        husband.setEmail(StringUtil.getValue(txtHubsEmail.getText(),         PREDICATE));
        husband.setWork(StringUtil.getValue(txtHusbWork.getText(),           PREDICATE));
        husband.setDay(StringUtil.getValue(cmbHusbDay.getSelectedItem(),     PREDICATE));
        husband.setMonth(StringUtil.getValue(cmbHusbMonth.getSelectedItem(), PREDICATE));
        husband.setTelephone(StringUtil.getValue(txtHusbPhone.getText(),     PHONE_PREDICATE));
        husband.setCellphone(StringUtil.getValue(txtHusbCellphone.getText(), PHONE_PREDICATE));
        return husband;
    }
    
    private Wife getWifeData() {
        final String name  = txtWifeName.getText();
        if (StringUtil.isEmpty(name)) {
            JOptionPane.showMessageDialog(this, "O nome da esposa deve ser fornecido.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return null;
        } 
        final Wife wife    = currentCouple == null ? new Wife() : currentCouple.getWife();
        wife.setName(name);
        wife.setEmail(StringUtil.getValue(txtWifeEmail.getText(),         PREDICATE));
        wife.setWork(StringUtil.getValue(txtWifeWork.getText(),           PREDICATE));
        wife.setDay(StringUtil.getValue(cmbWifeDay.getSelectedItem(),     PREDICATE));
        wife.setMonth(StringUtil.getValue(cmbWifeMonth.getSelectedItem(), PREDICATE));        
        wife.setTelephone(StringUtil.getValue(txtWifePhone.getText(),     PHONE_PREDICATE));
        wife.setCellphone(StringUtil.getValue(txtWifeCellphone.getText(), PHONE_PREDICATE));
        return wife;        
    }
    
    private Couple getCoupleData() {
        final String name      = txtCoupleName.getText();
        if (StringUtil.isEmpty(name)) {
            JOptionPane.showMessageDialog(this, "O nome do casal deve ser fornecido.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return null;
        } 
        final Couple couple    = currentCouple == null ? new Couple() : currentCouple;
        final String imagePath = imagePanel.getImagePath();
        couple.setAddress(txtCoupleAddress.getText());
        couple.setName(name);
        couple.setCompl(StringUtil.getValue(txtCoupleCompl.getText(),               PREDICATE));
        couple.setDay(StringUtil.getValue(cmbCoupleDay.getSelectedItem(),           PREDICATE));
        couple.setMonth(StringUtil.getValue(cmbCoupleMonth.getSelectedItem(),       PREDICATE));
        couple.setZipcode(StringUtil.getValue(txtCoupleZipcode.getText(),           PREDICATE));
        couple.setState((FedUnit)cmbCoupleState.getSelectedItem());
        couple.setCity((City)cmbCoupleCity.getSelectedItem());
        couple.setNeighbor((Neighbor)cmbCoupleNeighbor.getSelectedItem());        

        if (!StringUtil.isEmpty(imagePath)) {
            couple.setPhotoPath(FACADE.copyImageFileToSeminaryFolder(imagePath));
        }        
        couple.setCode(index);
        return couple;
    }
    
    private void selectById(JComboBox comboBox, int codeFU) {        
        final DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox.getModel();
        for (int i = 0, s = model.getSize(); i < s; ++i) {
            Codeable codeable = (Codeable)model.getElementAt(i);
            if (codeable.getCode() == codeFU) {
                model.setSelectedItem(codeable);
                break;
            }
        }
    }
        
    private void clearTextField(JTextField textField) {
        textField.setText(EMPTY_STR);
    }
    
    private void setComboNonSelected(JComboBox cmb) {
        cmb.setSelectedIndex(-1);
    }
    
    private void setComponentsProperties() {               
        
        tabPanelCouple.setTitleAt(0, "Esposo");
        tabPanelCouple.setTitleAt(1, "Esposa");
        tabPanelCouple.setTitleAt(2, "Casal");
        cmbHusbDay.setModel(new DefaultComboBoxModel());        
        cmbWifeDay.setModel(new DefaultComboBoxModel());
        cmbCoupleDay.setModel(new DefaultComboBoxModel());
        cmbHusbMonth.setModel(new DefaultComboBoxModel());
        cmbWifeMonth.setModel(new DefaultComboBoxModel());
        cmbCoupleMonth.setModel(new DefaultComboBoxModel());
        cmbCoupleState.setModel(new DefaultComboBoxModel());
        cmbCoupleCity.setModel(new DefaultComboBoxModel());
        cmbHusbWork.setModel(new DefaultComboBoxModel());
        cmbWifeWork.setModel(new DefaultComboBoxModel());
        cmbCoupleCity.setPrototypeDisplayValue("XXXXXXX");
        cmbCoupleNeighbor.setModel(new DefaultComboBoxModel());        
        cmbCoupleCity.setPrototypeDisplayValue("XXXXXXX");
        populateDay(cmbHusbDay);        
        populateDay(cmbWifeDay);
        populateDay(cmbCoupleDay);
        populateMonth(cmbHusbMonth);
        populateMonth(cmbWifeMonth);        
        populateMonth(cmbCoupleMonth);        
        populateWorks(cmbHusbWork);
        populateWorks(cmbWifeWork);
        populateFederativeUnitList();        
    }
    
    public void setLabelCoupleSize(int s) {
        labCoupleSize.setText(String.format("%d - %d", index, s));
    }
    
    public void setCurrentIndex(int i) {
        index = i;
    }
    
    private void populateWorks(JComboBox comboBox) {
        final DefaultComboBoxModel comboModel = (DefaultComboBoxModel)comboBox.getModel();
        for (String work : FACADE.getWorksDescription()) {
            comboModel.addElement(work);    
        }           
    }
    
    private void setDynamicListListeners() {        
        cmbCoupleState.addItemListener(new ItemListener() {            
            @Override
            public void itemStateChanged(ItemEvent e) {
                cmbCoupleCity.removeActionListener(cityActionListener);
                loadCityData((FedUnit)e.getItem());    
                ((DefaultComboBoxModel)cmbCoupleNeighbor.getModel()).removeAllElements();
                cmbCoupleCity.addActionListener(cityActionListener);                
            }
        });
        addWorkActionListeners(cmbHusbWork, txtHusbWork);
        addWorkActionListeners(cmbWifeWork, txtWifeWork);
    }
    
    private void addWorkActionListeners(final JComboBox comboBox, final JTextField field) {
        comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                field.setText((String)comboBox.getSelectedItem());
            }
        });        
    }
    
    private void populateDay(JComboBox comboBox) {
        final DefaultComboBoxModel comboModel = (DefaultComboBoxModel)comboBox.getModel();
        for (int i = 1; i <= 31; ++i) {
            comboModel.addElement(String.valueOf(i));
        }
        setComboNonSelected(comboBox);
    }
    private void populateMonth(JComboBox comboBox) {        
        final DefaultComboBoxModel comboModel = (DefaultComboBoxModel)comboBox.getModel();
        for (Month month : FACADE.getMonths()) {
            comboModel.addElement(month);    
        }   
        setComboNonSelected(comboBox);
    }
    
    private void populateFederativeUnitList() {
        
        final DefaultComboBoxModel comboModel = (DefaultComboBoxModel)cmbCoupleState.getModel();
        comboModel.removeAllElements();
        for (FedUnit fedUnit : FACADE.getFederativeUnits()) {
            comboModel.addElement(fedUnit);
        }         
        cmbCoupleState.setSelectedIndex(-1);
    }
    
    private void loadCityData(FedUnit fedUnit) {
        if (fedUnit == null) {
            return;
        }
        final List<City> cities = FACADE.getCitiesByFedUnit(fedUnit);
        if (cities.isEmpty()) {
            throw  new IllegalStateException("Invalid db state, maybe it's been corrupted");
        }
        final DefaultComboBoxModel model = (DefaultComboBoxModel)cmbCoupleCity.getModel();
        model.removeAllElements();
        for (City city : cities) {
            model.addElement(city);
        }                    
    }
    
    private void loadNeighborData(City city) {
        if (city == null) {
            return;
        }
        final List<Neighbor> neighbors   = FACADE.getNeighborsByCity(city);
        final DefaultComboBoxModel model = (DefaultComboBoxModel)cmbCoupleNeighbor.getModel();
        model.removeAllElements();
        // some city here in Brazil has no neighbors whatsoever
        // then let's remove them all
        for (Neighbor neighbor : neighbors) {
            model.addElement(neighbor);
        }                            
    }
    
    private MaskFormatter husbPhoneMask;
    private MaskFormatter husbCellMask;
    private MaskFormatter wifePhoneMask;
    private MaskFormatter wifeCellMask;
    private MaskFormatter coupleZipcodeMask;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JButton btnAdd = new javax.swing.JButton();
    private final javax.swing.JButton btnClear = new javax.swing.JButton();
    private final javax.swing.JButton btnNextData = new javax.swing.JButton();
    private final javax.swing.JButton btnPickPhoto = new javax.swing.JButton();
    private final javax.swing.JButton btnPrevData = new javax.swing.JButton();
    private final javax.swing.JButton btnSearchZipcode = new javax.swing.JButton();
    private final javax.swing.JComboBox cmbCoupleCity = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbCoupleDay = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbCoupleMonth = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbCoupleNeighbor = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbCoupleState = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbHusbDay = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbHusbMonth = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbHusbWork = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbWifeDay = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbWifeMonth = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbWifeWork = new javax.swing.JComboBox();
    private final com.yattatech.ui.ImagePanel imagePanel = new com.yattatech.ui.ImagePanel();
    private final javax.swing.JComboBox jComboBox1 = new javax.swing.JComboBox();
    private final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleAddress = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleCity = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleCompl = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleName = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleNeighbor = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleSize = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleState = new javax.swing.JLabel();
    private final javax.swing.JLabel labCoupleZipcode = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbBirthday = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbCellPhone = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbEmail = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbName = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbPhone = new javax.swing.JLabel();
    private final javax.swing.JLabel labHusbWork = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifeBirthday = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifeCellPhone = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifeEmail = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifeName = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifePhone = new javax.swing.JLabel();
    private final javax.swing.JLabel labWifeWork = new javax.swing.JLabel();
    private final javax.swing.JPanel panelCouple = new javax.swing.JPanel();
    private final javax.swing.JPanel panelHusband = new javax.swing.JPanel();
    private final javax.swing.JPanel panelWife = new javax.swing.JPanel();
    private final javax.swing.JTabbedPane tabPanelCouple = new javax.swing.JTabbedPane();
    private final javax.swing.JTextField txtCoupleAddress = new javax.swing.JTextField();
    private final javax.swing.JTextField txtCoupleCompl = new javax.swing.JTextField();
    private final javax.swing.JTextField txtCoupleName = new javax.swing.JTextField();
    private javax.swing.JTextField txtCoupleZipcode;
    private final javax.swing.JTextField txtHubsEmail = new javax.swing.JTextField();
    private final javax.swing.JTextField txtHubsName = new javax.swing.JTextField();
    private javax.swing.JTextField txtHusbCellphone;
    private javax.swing.JTextField txtHusbPhone;
    private final javax.swing.JTextField txtHusbWork = new javax.swing.JTextField();
    private javax.swing.JTextField txtWifeCellphone;
    private final javax.swing.JTextField txtWifeEmail = new javax.swing.JTextField();
    private final javax.swing.JTextField txtWifeName = new javax.swing.JTextField();
    private javax.swing.JTextField txtWifePhone;
    private final javax.swing.JTextField txtWifeWork = new javax.swing.JTextField();
    // End of variables declaration//GEN-END:variables
}
